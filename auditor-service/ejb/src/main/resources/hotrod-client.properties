#infinispan.client.hotrod.request_balancing_strategy#, default = org.infinispan.client.hotrod.impl.transport.tcp.RoundRobinBalancingStrategy. For replicated (vs distributed) Hot Rod server clusters, the client balances requests to the servers according to this strategy.

#infinispan.client.hotrod.server_list=${jboss.datagrid.topology} 
#, default = 127.0.0.1:11222. This is the initial list of Hot Rod servers to connect to, specified in the following format: host1:port1;host2:port2... At least one host:port must be specified.

infinispan.client.hotrod.force_return_values=false
#, default = false. Whether or not to implicitly org.infinispan.client.hotrod.Flag.FORCE_RETURN_VALUE for all calls.

#infinispan.client.hotrod.tcp_no_delay#, default = true. Affects TCP NODELAY on the TCP stack.

#infinispan.client.hotrod.tcp_keep_alive#, default = false. Affects TCP KEEPALIVE on the TCP stack.

#infinispan.client.hotrod.ping_on_startup#, default = true. If true, a ping request is sent to a back end server in order to fetch cluster's topology.

#infinispan.client.hotrod.transport_factory#, default = org.infinispan.client.hotrod.impl.transport.tcp.TcpTransportFactory - controls which transport to use. Currently only the TcpTransport is supported.

infinispan.client.hotrod.marshaller=org.infinispan.client.hotrod.marshall.ProtoStreamMarshaller
#, default = org.infinispan.marshall.jboss.GenericJBossMarshaller. Allows you to specify a custom org.infinispan.marshall.Marshaller implementation to serialize and deserialize user objects. For portable serialization payloads, you should configure the marshaller to be org.infinispan.client.hotrod.marshall.ApacheAvroMarshaller

#infinispan.client.hotrod.async_executor_factory#, default = org.infinispan.client.hotrod.impl.async.DefaultAsyncExecutorFactory. Allows you to specify a custom asynchroous executor for async calls.

#infinispan.client.hotrod.default_executor_factory.pool_size#, default = 99. If the default executor is used, this configures the number of threads to initialize the executor with.

#infinispan.client.hotrod.default_executor_factory.queue_size#, default = 100000. If the default executor is used, this configures the queue size to initialize the executor with.

#infinispan.client.hotrod.hash_function_impl.1#, default = It uses the hash function specified by the server in the responses as indicated in org.infinispan.client.hotrod.impl.consistenthash.ConsistentHashFactory. This specifies the version of the hash function and consistent hash algorithm in use, and is closely tied with the HotRod server version used.

#infinispan.client.hotrod.key_size_estimate#, default = 64. This hint allows sizing of byte buffers when serializing and deserializing keys, to minimize array resizing.

#infinispan.client.hotrod.value_size_estimate#, default = 512. This hint allows sizing of byte buffers when serializing and deserializing values, to minimize array resizing.

#infinispan.client.hotrod.socket_timeout#, default = 60000 (60 seconds). This property defines the maximum socket read timeout before giving up waiting for bytes from the server.

#infinispan.client.hotrod.protocol_version#, default = 2.0 .This property defines the protocol version that this client should use. Other valid values include 1.0.

#infinispan.client.hotrod.connect_timeout#, default = 60000 (60 seconds). This property defines the maximum socket connect timeout before giving up connecting to the server.

infinispan.client.hotrod.max_retries=1000
#, default = 10. This property defines the maximum number of retries in case of a recoverable error. A valid value should be greater or equals to 0 (zero). Zero mean no retry.




#
#The following properties are related to connection pooling:
#

maxActive=100 
# - controls the maximum number of connections per server that are allocated (checked out to client threads, or idle in the pool) at one time. When non-positive, there is no limit to the number of connections per server. When maxActive is reached, the connection pool for that server is said to be exhausted. The default setting for this parameter is -1, i.e. there is no limit.

maxTotal=100 
# - sets a global limit on the number persistent connections that can be in circulation within the combined set of servers. When non-positive, there is no limit to the total number of persistent connections in circulation. When maxTotal is exceeded, all connections pools are exhausted. The default setting for this parameter is -1 (no limit).

maxIdle=20 
# - controls the maximum number of idle persistent connections, per server, at any time. When negative, there is no limit to the number of connections that may be idle per server. The default setting for this parameter is -1.

whenExhaustedAction=1
# - specifies what happens when asking for a connection from a server's pool, and that pool is exhausted. Possible values:
#0 - an exception will be thrown to the calling user
#1 - the caller will block (invoke waits until a new or idle connections is available.
#2 - a new persistent connection will be created and returned (essentially making maxActive meaningless.)